;; english

(import "enumerate.limo")

(setq smalls '((0 . "zero")
	       (1 . "one")
	       (2 . "two")
	       (3 . "three")
	       (4 . "four")
	       (5 . "five")
	       (6 . "six")
	       (7 . "seven")
	       (8 . "eight")
	       (9 . "nine")
	       (10 . "ten")
	       (11 . "eleven")
	       (12 . "twelwe")
	       (13 . "thirteen")
	       (14 . "fourteen")
	       (15 . "fifteen")
	       (16 . "sixteen")
	       (17 . "seventeen")
	       (18 . "eighteen")
	       (19 . "nineteen")))

(setq zigs '((2 . "twenty")
	     (3 . "thirty")
	     (4 . "fourty")
	     (5 . "fifty")
	     (6 . "sixty")
	     (7 . "seventy")
	     (8 . "eighty")
	     (9 . "ninety")))

(setq numbers-and-names
      (map (lambda (n)
	     (cond ((assoc n smalls)
		    (cons n (cdr (assoc n smalls))))
		   ((= (mod n 10) 0)
		    (cons n (cdr (assoc (/ n 10) zigs))))
		   (:else
		    (cons n (format "%s%s" (cdr (assoc (floor (/ n 10)) zigs)) (cdr (assoc (mod n 10) smalls)))))))
	   (mdrange 100)))

(setq sorted (sort (lambda (x y) (string< (cdr x) (cdr y))) numbers-and-names))

(for-each n (enumerate sorted)
  (print (format "%n %n\n" (cadr n) (car n))))
